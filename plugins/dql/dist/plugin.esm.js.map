{"version":3,"file":"plugin.esm.js","sources":["../src/plugin.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright 2024 Dynatrace LLC\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { DqlQueryApiClient, dqlQueryApiRef } from './api';\r\nimport { rootRouteRef } from './routes';\r\nimport {\r\n  createApiFactory,\r\n  createComponentExtension,\r\n  createPlugin,\r\n  discoveryApiRef,\r\n} from '@backstage/core-plugin-api';\r\n\r\nexport const dqlQueryPlugin = createPlugin({\r\n  id: 'dynatrace-dql',\r\n  apis: [\r\n    createApiFactory({\r\n      api: dqlQueryApiRef,\r\n      deps: {\r\n        discoveryApi: discoveryApiRef,\r\n      },\r\n      factory: ({ discoveryApi }) => new DqlQueryApiClient({ discoveryApi }),\r\n    }),\r\n  ],\r\n  routes: {\r\n    root: rootRouteRef,\r\n  },\r\n});\r\n\r\nexport const EntityDqlQueryCard = dqlQueryPlugin.provide(\r\n  createComponentExtension({\r\n    name: 'EntityDqlQueryCard',\r\n    component: {\r\n      lazy: () => import('./components').then(m => m.DqlQuery),\r\n    },\r\n  }),\r\n);\r\n\r\nexport const EntityCatalogInfoQueryCard = dqlQueryPlugin.provide(\r\n  createComponentExtension({\r\n    name: 'EntityCatalogInfoQueryCard',\r\n    component: {\r\n      lazy: () => import('./components').then(m => m.CatalogInfoQuery),\r\n    },\r\n  }),\r\n);\r\n\r\nexport const EntityKubernetesDeploymentsCard = dqlQueryPlugin.provide(\r\n  createComponentExtension({\r\n    name: 'EntityKubernetesDeploymentsCard',\r\n    component: {\r\n      lazy: () => import('./components').then(m => m.KubernetesDeployments),\r\n    },\r\n  }),\r\n);\r\n"],"names":[],"mappings":";;;;;AAwBO,MAAM,iBAAiB,YAAa,CAAA;AAAA,EACzC,EAAI,EAAA,eAAA;AAAA,EACJ,IAAM,EAAA;AAAA,IACJ,gBAAiB,CAAA;AAAA,MACf,GAAK,EAAA,cAAA;AAAA,MACL,IAAM,EAAA;AAAA,QACJ,YAAc,EAAA,eAAA;AAAA,OAChB;AAAA,MACA,OAAA,EAAS,CAAC,EAAE,YAAA,OAAmB,IAAI,iBAAA,CAAkB,EAAE,YAAA,EAAc,CAAA;AAAA,KACtE,CAAA;AAAA,GACH;AAAA,EACA,MAAQ,EAAA;AAAA,IACN,IAAM,EAAA,YAAA;AAAA,GACR;AACF,CAAC,EAAA;AAEM,MAAM,qBAAqB,cAAe,CAAA,OAAA;AAAA,EAC/C,wBAAyB,CAAA;AAAA,IACvB,IAAM,EAAA,oBAAA;AAAA,IACN,SAAW,EAAA;AAAA,MACT,IAAA,EAAM,MAAM,OAAO,2BAAc,EAAE,IAAK,CAAA,CAAA,CAAA,KAAK,EAAE,QAAQ,CAAA;AAAA,KACzD;AAAA,GACD,CAAA;AACH,EAAA;AAEO,MAAM,6BAA6B,cAAe,CAAA,OAAA;AAAA,EACvD,wBAAyB,CAAA;AAAA,IACvB,IAAM,EAAA,4BAAA;AAAA,IACN,SAAW,EAAA;AAAA,MACT,IAAA,EAAM,MAAM,OAAO,2BAAc,EAAE,IAAK,CAAA,CAAA,CAAA,KAAK,EAAE,gBAAgB,CAAA;AAAA,KACjE;AAAA,GACD,CAAA;AACH,EAAA;AAEO,MAAM,kCAAkC,cAAe,CAAA,OAAA;AAAA,EAC5D,wBAAyB,CAAA;AAAA,IACvB,IAAM,EAAA,iCAAA;AAAA,IACN,SAAW,EAAA;AAAA,MACT,IAAA,EAAM,MAAM,OAAO,2BAAc,EAAE,IAAK,CAAA,CAAA,CAAA,KAAK,EAAE,qBAAqB,CAAA;AAAA,KACtE;AAAA,GACD,CAAA;AACH;;;;"}