{"version":3,"file":"DqlQueryApiClient.esm.js","sources":["../../src/api/DqlQueryApiClient.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright 2024 Dynatrace LLC\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { CatalogQueryData, DqlQueryApi } from './types';\r\nimport { DiscoveryApi } from '@backstage/core-plugin-api';\r\nimport { ResponseError } from '@backstage/errors';\r\nimport {\r\n  TabularData,\r\n  TabularDataFactory,\r\n} from '@dynatrace/backstage-plugin-dql-common';\r\n\r\nexport class DqlQueryApiClient implements DqlQueryApi {\r\n  private readonly discoveryApi: DiscoveryApi;\r\n\r\n  constructor(options: { discoveryApi: DiscoveryApi }) {\r\n    this.discoveryApi = options.discoveryApi;\r\n  }\r\n\r\n  async getData(\r\n    queryNamespace: string,\r\n    queryName: string,\r\n    entityRef: string,\r\n    identityToken: string,\r\n  ): Promise<TabularData> {\r\n    const baseUrl = await this.discoveryApi.getBaseUrl('dynatrace-dql');\r\n    const searchParams = new URLSearchParams({ entityRef });\r\n    const url = `${baseUrl}/${queryNamespace}/${queryName}?${searchParams}`;\r\n    const response = await fetch(url, {\r\n      method: 'GET',\r\n      headers: {\r\n        Authorization: `Bearer ${identityToken}`,\r\n      },\r\n    });\r\n\r\n    if (response.status === 404) {\r\n      throw new Error(`Query ${queryNamespace}/${queryName} does not exist.`);\r\n    } else if (response.status !== 200) {\r\n      throw await ResponseError.fromResponse(response);\r\n    }\r\n\r\n    const jsonResponse = await response.json();\r\n    return TabularDataFactory.fromObject(jsonResponse);\r\n  }\r\n\r\n  async getDataFromQueries(\r\n    queryNamespace: string,\r\n    entityRef: string,\r\n    identityToken: string,\r\n  ): Promise<CatalogQueryData[]> {\r\n    const baseUrl = await this.discoveryApi.getBaseUrl('dynatrace-dql');\r\n    const searchParams = new URLSearchParams({ entityRef });\r\n    const url = `${baseUrl}/${queryNamespace}?${searchParams}`;\r\n    const response = await fetch(url, {\r\n      method: 'GET',\r\n      headers: {\r\n        Authorization: `Bearer ${identityToken}`,\r\n      },\r\n    });\r\n\r\n    if (response.status === 404) {\r\n      throw new Error(`Query ${queryNamespace} does not exist.`);\r\n    } else if (response.status !== 200) {\r\n      throw await ResponseError.fromResponse(response);\r\n    }\r\n    const jsonResponse = await response.json();\r\n    jsonResponse.forEach((element: CatalogQueryData) => {\r\n      TabularDataFactory.fromObject(element.data);\r\n    });\r\n    return jsonResponse;\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAuBO,MAAM,iBAAyC,CAAA;AAAA,EACnC,YAAA,CAAA;AAAA,EAEjB,YAAY,OAAyC,EAAA;AACnD,IAAA,IAAA,CAAK,eAAe,OAAQ,CAAA,YAAA,CAAA;AAAA,GAC9B;AAAA,EAEA,MAAM,OAAA,CACJ,cACA,EAAA,SAAA,EACA,WACA,aACsB,EAAA;AACtB,IAAA,MAAM,OAAU,GAAA,MAAM,IAAK,CAAA,YAAA,CAAa,WAAW,eAAe,CAAA,CAAA;AAClE,IAAA,MAAM,YAAe,GAAA,IAAI,eAAgB,CAAA,EAAE,WAAW,CAAA,CAAA;AACtD,IAAM,MAAA,GAAA,GAAM,GAAG,OAAO,CAAA,CAAA,EAAI,cAAc,CAAI,CAAA,EAAA,SAAS,IAAI,YAAY,CAAA,CAAA,CAAA;AACrE,IAAM,MAAA,QAAA,GAAW,MAAM,KAAA,CAAM,GAAK,EAAA;AAAA,MAChC,MAAQ,EAAA,KAAA;AAAA,MACR,OAAS,EAAA;AAAA,QACP,aAAA,EAAe,UAAU,aAAa,CAAA,CAAA;AAAA,OACxC;AAAA,KACD,CAAA,CAAA;AAED,IAAI,IAAA,QAAA,CAAS,WAAW,GAAK,EAAA;AAC3B,MAAA,MAAM,IAAI,KAAM,CAAA,CAAA,MAAA,EAAS,cAAc,CAAA,CAAA,EAAI,SAAS,CAAkB,gBAAA,CAAA,CAAA,CAAA;AAAA,KACxE,MAAA,IAAW,QAAS,CAAA,MAAA,KAAW,GAAK,EAAA;AAClC,MAAM,MAAA,MAAM,aAAc,CAAA,YAAA,CAAa,QAAQ,CAAA,CAAA;AAAA,KACjD;AAEA,IAAM,MAAA,YAAA,GAAe,MAAM,QAAA,CAAS,IAAK,EAAA,CAAA;AACzC,IAAO,OAAA,kBAAA,CAAmB,WAAW,YAAY,CAAA,CAAA;AAAA,GACnD;AAAA,EAEA,MAAM,kBAAA,CACJ,cACA,EAAA,SAAA,EACA,aAC6B,EAAA;AAC7B,IAAA,MAAM,OAAU,GAAA,MAAM,IAAK,CAAA,YAAA,CAAa,WAAW,eAAe,CAAA,CAAA;AAClE,IAAA,MAAM,YAAe,GAAA,IAAI,eAAgB,CAAA,EAAE,WAAW,CAAA,CAAA;AACtD,IAAA,MAAM,MAAM,CAAG,EAAA,OAAO,CAAI,CAAA,EAAA,cAAc,IAAI,YAAY,CAAA,CAAA,CAAA;AACxD,IAAM,MAAA,QAAA,GAAW,MAAM,KAAA,CAAM,GAAK,EAAA;AAAA,MAChC,MAAQ,EAAA,KAAA;AAAA,MACR,OAAS,EAAA;AAAA,QACP,aAAA,EAAe,UAAU,aAAa,CAAA,CAAA;AAAA,OACxC;AAAA,KACD,CAAA,CAAA;AAED,IAAI,IAAA,QAAA,CAAS,WAAW,GAAK,EAAA;AAC3B,MAAA,MAAM,IAAI,KAAA,CAAM,CAAS,MAAA,EAAA,cAAc,CAAkB,gBAAA,CAAA,CAAA,CAAA;AAAA,KAC3D,MAAA,IAAW,QAAS,CAAA,MAAA,KAAW,GAAK,EAAA;AAClC,MAAM,MAAA,MAAM,aAAc,CAAA,YAAA,CAAa,QAAQ,CAAA,CAAA;AAAA,KACjD;AACA,IAAM,MAAA,YAAA,GAAe,MAAM,QAAA,CAAS,IAAK,EAAA,CAAA;AACzC,IAAa,YAAA,CAAA,OAAA,CAAQ,CAAC,OAA8B,KAAA;AAClD,MAAmB,kBAAA,CAAA,UAAA,CAAW,QAAQ,IAAI,CAAA,CAAA;AAAA,KAC3C,CAAA,CAAA;AACD,IAAO,OAAA,YAAA,CAAA;AAAA,GACT;AACF;;;;"}