{"version":3,"file":"queries.cjs.js","sources":["../../src/service/queries.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright 2024 Dynatrace LLC\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { generateKubernetesSelectorFilter } from '../utils/labelSelectorParser';\r\nimport { Entity } from '@backstage/catalog-model';\r\n\r\nexport enum DynatraceQueryKeys {\r\n  KUBERNETES_DEPLOYMENTS = 'kubernetes-deployments',\r\n  SRG_VALIDATIONS = 'srg-validations',\r\n}\r\n\r\ninterface ApiConfig {\r\n  environmentName: string;\r\n  environmentUrl: string;\r\n}\r\n\r\nexport const isValidDynatraceQueryKey = (\r\n  key: string,\r\n): key is DynatraceQueryKeys => key in dynatraceQueries;\r\n\r\nexport const dynatraceQueries: Record<\r\n  DynatraceQueryKeys,\r\n  (entity: Entity, apiConfig: ApiConfig) => string\r\n> = {\r\n  [DynatraceQueryKeys.KUBERNETES_DEPLOYMENTS]: (entity, apiConfig) => {\r\n    const labelSelector =\r\n      entity.metadata.annotations?.['backstage.io/kubernetes-label-selector'];\r\n    const kubernetesId =\r\n      entity.metadata.annotations?.['backstage.io/kubernetes-id'];\r\n    const namespace =\r\n      entity.metadata.annotations?.['backstage.io/kubernetes-namespace'];\r\n\r\n    const filterLabel = labelSelector\r\n      ? generateKubernetesSelectorFilter(labelSelector)\r\n      : '';\r\n    // if a label filter is given, the id is ignored\r\n    const filterKubernetesId =\r\n      filterLabel || !kubernetesId\r\n        ? ''\r\n        : `| filter workload.labels[\\`backstage.io/kubernetes-id\\`] == \"${kubernetesId}\"`;\r\n    const filterNamespace = namespace\r\n      ? `| filter Namespace == \"${namespace}\"`\r\n      : '';\r\n\r\n    if (!filterKubernetesId && !filterLabel) {\r\n      throw new Error(\r\n        'One of the component annotations is required: \"backstage.io/kubernetes-id\" or \"backstage.io/kubernetes-label-selector\"',\r\n      );\r\n    }\r\n\r\n    return `\r\n    fetch dt.entity.cloud_application, from: -10m\r\n    | fields id,\r\n        name = entity.name,\r\n        workload.labels = cloudApplicationLabels,\r\n        cluster.id = clustered_by[dt.entity.kubernetes_cluster],\r\n        namespace.id = belongs_to[dt.entity.cloud_application_namespace]\r\n    | sort upper(name) asc    \r\n    | lookup [fetch dt.entity.kubernetes_cluster, from: -10m | fields id, clusterName = entity.name],sourceField:cluster.id, lookupField:id, fields:{clusterName}\r\n    | lookup [fetch dt.entity.cloud_application_namespace, from: -10m | fields id, namespaceName = entity.name], sourceField:namespace.id, lookupField:id, fields:{namespaceName}\r\n    | fieldsAdd Workload = record({type=\"link\", text=name, url=concat(\"${apiConfig.environmentUrl}/ui/apps/dynatrace.kubernetes/resources/workload?entityId=\", id, \"&cluster=\", clusterName, \"&namespace=\", namespaceName, \"&workload=\", name)})\r\n    | fieldsAdd Cluster = clusterName, Namespace = namespaceName\r\n    | fieldsRemove clusterName, namespaceName\r\n    | lookup [fetch events, from: -30m | filter event.kind == \"DAVIS_PROBLEM\" | fieldsAdd affected_entity_id = affected_entity_ids[0] | summarize collectDistinct(event.status), by:{display_id, affected_entity_id}, alias:problem_status | filter NOT in(problem_status, \"CLOSED\") | summarize Problems = count(), by:{affected_entity_id}], sourceField:id, lookupField:affected_entity_id, fields:{Problems}\r\n    | fieldsAdd Problems=coalesce(Problems,0)\r\n    | lookup [ fetch events, from: -30m | filter event.kind==\"SECURITY_EVENT\" | filter event.category==\"VULNERABILITY_MANAGEMENT\" | filter event.provider==\"Dynatrace\" | filter event.type==\"VULNERABILITY_STATE_REPORT_EVENT\" | filter in(vulnerability.stack,{\"CODE_LIBRARY\",\"SOFTWARE\",\"CONTAINER_ORCHESTRATION\"}) | filter event.level==\"ENTITY\" | summarize { workloadId=arrayFirst(takeFirst(related_entities.kubernetes_workloads.ids)), vulnerability.stack=takeFirst(vulnerability.stack)}, by: {vulnerability.id, affected_entity.id} | summarize { Vulnerabilities=count() }, by: {workloadId}], sourceField:id, lookupField:workloadId, fields:{Vulnerabilities}\r\n    | fieldsAdd Vulnerabilities=coalesce(Vulnerabilities,0)\r\n    ${filterKubernetesId} \r\n    ${filterNamespace} \r\n    ${filterLabel}\r\n    | fieldsAdd Logs = record({type=\"link\", text=\"Show logs\", url=concat(\r\n      \"${apiConfig.environmentUrl}\",\r\n      \"/ui/apps/dynatrace.notebooks/intent/view-query#%7B%22dt.query%22%3A%22fetch%20logs%20%7C%20filter%20matchesValue(dt.entity.cloud_application%2C%5C%22\",\r\n      id,\r\n      \"%5C%22)%20%7C%20sort%20timestamp%20desc%22%2C%22title%22%3A%22Logs%22%7D\")})\r\n    | fieldsRemove id, name, workload.labels, cluster.id, namespace.id\r\n    | fieldsAdd Environment = \"${apiConfig.environmentName}\"`;\r\n  },\r\n  [DynatraceQueryKeys.SRG_VALIDATIONS]: (entity, apiConfig) => {\r\n    const catalogTags =\r\n      entity.metadata.annotations?.['dynatrace.com/guardian-tags'];\r\n    let filterString = '';\r\n\r\n    if (catalogTags) {\r\n      const tags = catalogTags.split(',').map(tag => {\r\n        const [key, value] = tag.split('=');\r\n        return { key, value: value !== undefined ? value || '' : undefined };\r\n      });\r\n\r\n      if (tags.length > 0) {\r\n        filterString += '| filter ';\r\n        filterString += tags\r\n          .map(({ key, value }) =>\r\n            value !== undefined\r\n              ? `in (tags[\\`${key}\\`], \"${value}\")`\r\n              : `isNotNull(tags[${key}])`,\r\n          )\r\n          .join(' AND ');\r\n      }\r\n    }\r\n    return `\r\n    fetch bizevents, from: -7d\r\n    | filter event.provider == \"dynatrace.site.reliability.guardian\"\r\n    | filter event.type == \"guardian.validation.finished\"\r\n    | parse validation.summary, \"JSON:summary\"\r\n    | parse execution_context, \"JSON:context\"\r\n    | parse guardian.tags, \"JSON:tags\"\r\n    ${filterString}\r\n    | fieldsAdd Version = if(isNull(context[version]), \"N/A\", else: context[version])\r\n    | fieldsRename \\`Validation Result\\` = validation.status\r\n    | fieldsAdd Error = summary[error], Fail = summary[fail], Warning = summary[warning], Pass = summary[pass], Info = summary[info]\r\n    | fieldsAdd Environment = \"${apiConfig.environmentName}\"\r\n    | fieldsAdd Link = record({type=\"link\", text=\"Open Validation\", url=concat(\r\n      \"${apiConfig.environmentUrl}\",\r\n      \"/ui/intent/dynatrace.site.reliability.guardian/view_validation#%7B%22guardian.id%22%3A%22\",\r\n      guardian.id,\r\n      \"%22%2C%22validation.id%22%3A%22\",\r\n      validation.id,\r\n      \"%22%7D\")})\r\n    | fieldsKeep Fail, Error, Pass, Info, Warning, Link, \\`Validation Result\\`, Version, Environment\r\n    `;\r\n  },\r\n};\r\n"],"names":["generateKubernetesSelectorFilter"],"mappings":"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"}