{"version":3,"file":"router.cjs.js","sources":["../../src/service/router.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright 2024 Dynatrace LLC\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { parseCustomQueries, parseEnvironments } from '../utils/configParser';\r\nimport { getEntityFromRequest, validateQueries } from '../utils/routeUtils';\r\nimport { QueryExecutor } from './queryExecutor';\r\nimport { MiddlewareFactory } from '@backstage/backend-defaults/rootHttpRouter';\r\nimport { DiscoveryService } from '@backstage/backend-plugin-api';\r\nimport { LoggerService, AuthService } from '@backstage/backend-plugin-api';\r\nimport { CatalogClient } from '@backstage/catalog-client';\r\nimport { Config } from '@backstage/config';\r\nimport { ExtendedEntity } from '@dynatrace/backstage-plugin-dql-common';\r\nimport express from 'express';\r\nimport Router from 'express-promise-router';\r\n\r\nexport interface RouterOptions {\r\n  logger: LoggerService;\r\n  config: Config;\r\n  discovery: DiscoveryService;\r\n  auth: AuthService;\r\n}\r\n\r\nexport const createRouter = async (\r\n  options: RouterOptions,\r\n): Promise<express.Router> => {\r\n  const { config, discovery, logger, auth } = options;\r\n\r\n  const apis = parseEnvironments(config, logger);\r\n  const customQueries = parseCustomQueries(config);\r\n  const queryExecutor = new QueryExecutor(apis, customQueries);\r\n  const catalogClient = new CatalogClient({ discoveryApi: discovery });\r\n\r\n  const router = Router();\r\n  router.use(express.json());\r\n\r\n  router.get('/catalog', async (req, res) => {\r\n    const entity = await getEntityFromRequest(req, catalogClient, auth);\r\n    const extendedEntity: ExtendedEntity = entity;\r\n    const validatedQueries = validateQueries(extendedEntity);\r\n    const result = await queryExecutor.executeCustomCatalogQueries(\r\n      validatedQueries,\r\n      {\r\n        componentNamespace: entity.metadata.namespace ?? 'default',\r\n        componentName: entity.metadata.name,\r\n      },\r\n    );\r\n    return res.json(result);\r\n  });\r\n\r\n  router.get('/custom/:queryId', async (req, res) => {\r\n    const entity = await getEntityFromRequest(req, catalogClient, auth);\r\n    const result = await queryExecutor.executeCustomQuery(req.params.queryId, {\r\n      componentNamespace: entity.metadata.namespace ?? 'default',\r\n      componentName: entity.metadata.name,\r\n    });\r\n    return res.json(result);\r\n  });\r\n\r\n  router.get('/dynatrace/:queryId', async (req, res) => {\r\n    const entity = await getEntityFromRequest(req, catalogClient, auth);\r\n    const deployments = await queryExecutor.executeDynatraceQuery(\r\n      req.params.queryId,\r\n      entity,\r\n    );\r\n    res.json(deployments);\r\n  });\r\n\r\n  router.use(MiddlewareFactory.create({ logger, config }).error());\r\n  return router;\r\n};\r\n"],"names":["parseEnvironments","parseCustomQueries","queryExecutor","QueryExecutor","catalogClient","CatalogClient","Router","express","getEntityFromRequest","validateQueries","MiddlewareFactory"],"mappings":";;;;;;;;;;;;;;;AAkCa,MAAA,YAAA,GAAe,OAC1B,OAC4B,KAAA;AAC5B,EAAA,MAAM,EAAE,MAAA,EAAQ,SAAW,EAAA,MAAA,EAAQ,MAAS,GAAA,OAAA,CAAA;AAE5C,EAAM,MAAA,IAAA,GAAOA,8BAAkB,CAAA,MAAA,EAAQ,MAAM,CAAA,CAAA;AAC7C,EAAM,MAAA,aAAA,GAAgBC,gCAAmB,MAAM,CAAA,CAAA;AAC/C,EAAA,MAAMC,eAAgB,GAAA,IAAIC,2BAAc,CAAA,IAAA,EAAM,aAAa,CAAA,CAAA;AAC3D,EAAA,MAAMC,kBAAgB,IAAIC,2BAAA,CAAc,EAAE,YAAA,EAAc,WAAW,CAAA,CAAA;AAEnE,EAAA,MAAM,SAASC,uBAAO,EAAA,CAAA;AACtB,EAAO,MAAA,CAAA,GAAA,CAAIC,wBAAQ,CAAA,IAAA,EAAM,CAAA,CAAA;AAEzB,EAAA,MAAA,CAAO,GAAI,CAAA,UAAA,EAAY,OAAO,GAAA,EAAK,GAAQ,KAAA;AACzC,IAAA,MAAM,MAAS,GAAA,MAAMC,+BAAqB,CAAA,GAAA,EAAKJ,iBAAe,IAAI,CAAA,CAAA;AAClE,IAAA,MAAM,cAAiC,GAAA,MAAA,CAAA;AACvC,IAAM,MAAA,gBAAA,GAAmBK,2BAAgB,cAAc,CAAA,CAAA;AACvD,IAAM,MAAA,MAAA,GAAS,MAAMP,eAAc,CAAA,2BAAA;AAAA,MACjC,gBAAA;AAAA,MACA;AAAA,QACE,kBAAA,EAAoB,MAAO,CAAA,QAAA,CAAS,SAAa,IAAA,SAAA;AAAA,QACjD,aAAA,EAAe,OAAO,QAAS,CAAA,IAAA;AAAA,OACjC;AAAA,KACF,CAAA;AACA,IAAO,OAAA,GAAA,CAAI,KAAK,MAAM,CAAA,CAAA;AAAA,GACvB,CAAA,CAAA;AAED,EAAA,MAAA,CAAO,GAAI,CAAA,kBAAA,EAAoB,OAAO,GAAA,EAAK,GAAQ,KAAA;AACjD,IAAA,MAAM,MAAS,GAAA,MAAMM,+BAAqB,CAAA,GAAA,EAAKJ,iBAAe,IAAI,CAAA,CAAA;AAClE,IAAA,MAAM,SAAS,MAAMF,eAAA,CAAc,kBAAmB,CAAA,GAAA,CAAI,OAAO,OAAS,EAAA;AAAA,MACxE,kBAAA,EAAoB,MAAO,CAAA,QAAA,CAAS,SAAa,IAAA,SAAA;AAAA,MACjD,aAAA,EAAe,OAAO,QAAS,CAAA,IAAA;AAAA,KAChC,CAAA,CAAA;AACD,IAAO,OAAA,GAAA,CAAI,KAAK,MAAM,CAAA,CAAA;AAAA,GACvB,CAAA,CAAA;AAED,EAAA,MAAA,CAAO,GAAI,CAAA,qBAAA,EAAuB,OAAO,GAAA,EAAK,GAAQ,KAAA;AACpD,IAAA,MAAM,MAAS,GAAA,MAAMM,+BAAqB,CAAA,GAAA,EAAKJ,iBAAe,IAAI,CAAA,CAAA;AAClE,IAAM,MAAA,WAAA,GAAc,MAAMF,eAAc,CAAA,qBAAA;AAAA,MACtC,IAAI,MAAO,CAAA,OAAA;AAAA,MACX,MAAA;AAAA,KACF,CAAA;AACA,IAAA,GAAA,CAAI,KAAK,WAAW,CAAA,CAAA;AAAA,GACrB,CAAA,CAAA;AAED,EAAO,MAAA,CAAA,GAAA,CAAIQ,iCAAkB,MAAO,CAAA,EAAE,QAAQ,MAAO,EAAC,CAAE,CAAA,KAAA,EAAO,CAAA,CAAA;AAC/D,EAAO,OAAA,MAAA,CAAA;AACT;;;;"}