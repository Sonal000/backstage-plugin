{"version":3,"file":"queryExecutor.cjs.js","sources":["../../src/service/queryExecutor.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright 2024 Dynatrace LLC\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { CustomQueryConfig } from '../utils/configParser';\r\nimport { DynatraceApi } from './dynatraceApi';\r\nimport { dynatraceQueries, isValidDynatraceQueryKey } from './queries';\r\nimport { compileDqlQuery } from './queryCompiler';\r\nimport { Entity } from '@backstage/catalog-model';\r\nimport {\r\n  EntityQuery,\r\n  TabularData,\r\n} from '@dynatrace/backstage-plugin-dql-common';\r\nimport { CatalogQueryData } from '@dynatrace/backstage-plugin-dql/src/api/types';\r\nimport { z } from 'zod';\r\n\r\nconst componentQueryVariablesSchema = z.object({\r\n  // see https://backstage.io/docs/features/software-catalog/descriptor-format#namespace-optional\r\n  componentNamespace: z\r\n    .string()\r\n    .max(63)\r\n    .regex(/^[A-Za-z0-9\\-]+$/),\r\n  // see https://backstage.io/docs/features/software-catalog/descriptor-format#name-required\r\n  componentName: z\r\n    .string()\r\n    .max(63)\r\n    .regex(/^[A-Za-z0-9\\-_\\.]+$/),\r\n});\r\n\r\ntype ComponentQueryVariables = z.infer<typeof componentQueryVariablesSchema>;\r\n\r\nexport class QueryExecutor {\r\n  constructor(\r\n    private readonly apis: DynatraceApi[],\r\n    private readonly queries: Record<string, CustomQueryConfig | undefined>,\r\n  ) {}\r\n\r\n  filterApis = (apis: DynatraceApi[], filterApis: string[]): DynatraceApi[] => {\r\n    return apis.filter((api: DynatraceApi) =>\r\n      filterApis.includes(new URL(api.environmentUrl).host.split('.')[0]),\r\n    );\r\n  };\r\n\r\n  async executeCustomQuery(\r\n    queryId: string,\r\n    variables: ComponentQueryVariables,\r\n  ): Promise<TabularData> {\r\n    const dqlQueryConfig = this.queries[queryId];\r\n    if (!dqlQueryConfig?.query) {\r\n      throw new Error(`No custom query to the given id \"${queryId}\" found`);\r\n    }\r\n\r\n    const filteredApis = dqlQueryConfig.environments\r\n      ? this.filterApis(this.apis, dqlQueryConfig.environments)\r\n      : this.apis;\r\n\r\n    componentQueryVariablesSchema.parse(variables);\r\n    const results$ = filteredApis.map(api => {\r\n      const compiledQuery = compileDqlQuery(dqlQueryConfig.query, {\r\n        ...variables,\r\n        environmentName: api.environmentName,\r\n        environmentUrl: api.environmentUrl,\r\n      });\r\n      return api.executeDqlQuery(compiledQuery);\r\n    });\r\n    const results = await Promise.all(results$);\r\n    return results.flatMap(result => result);\r\n  }\r\n\r\n  async executeCustomCatalogQueries(\r\n    catalogQueries: EntityQuery[],\r\n    variables: ComponentQueryVariables,\r\n  ): Promise<CatalogQueryData[] | undefined> {\r\n    componentQueryVariablesSchema.parse(variables);\r\n\r\n    const results$ = catalogQueries.map(async catalogQuery => {\r\n      const filteredApis = catalogQuery.environments\r\n        ? this.filterApis(this.apis, catalogQuery.environments)\r\n        : this.apis;\r\n      const apiResultsPromises = filteredApis.map(async api => {\r\n        const compiledQuery = compileDqlQuery(catalogQuery.query, {\r\n          ...variables,\r\n          environmentName: api.environmentName,\r\n          environmentUrl: api.environmentUrl,\r\n        });\r\n        return await api.executeDqlQuery(compiledQuery);\r\n      });\r\n      const apiResults = await Promise.all(apiResultsPromises);\r\n      return {\r\n        title: catalogQuery.id,\r\n        data: apiResults.flat(),\r\n      };\r\n    });\r\n\r\n    const queryResults = await Promise.all(results$);\r\n    return queryResults;\r\n  }\r\n\r\n  async executeDynatraceQuery(\r\n    queryId: string,\r\n    entity: Entity,\r\n  ): Promise<TabularData> {\r\n    if (!isValidDynatraceQueryKey(queryId)) {\r\n      throw new Error(`No Dynatrace query to the given id \"${queryId}\" found`);\r\n    }\r\n    const results$ = this.apis.map(api =>\r\n      api.executeDqlQuery(dynatraceQueries[queryId](entity, api)),\r\n    );\r\n    const results = await Promise.all(results$);\r\n    return results.flatMap(result => result);\r\n  }\r\n}\r\n"],"names":["z","compileDqlQuery","isValidDynatraceQueryKey","dynatraceQueries"],"mappings":"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"}