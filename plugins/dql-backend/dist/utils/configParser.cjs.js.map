{"version":3,"file":"configParser.cjs.js","sources":["../../src/utils/configParser.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright 2024 Dynatrace LLC\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { DynatraceApi, DynatraceEnvironmentConfig } from '../service';\r\nimport { LoggerService } from '@backstage/backend-plugin-api';\r\nimport { Config } from '@backstage/config';\r\n\r\nconst defaultId = 'unknown';\r\n\r\nconst getId = (url: string) => {\r\n  try {\r\n    const host = new URL(url).host;\r\n    return host.substring(0, host.indexOf('.')) || defaultId;\r\n  } catch (e) {\r\n    return defaultId;\r\n  }\r\n};\r\n\r\nconst getIdentifier = (configArray: Config[]) => {\r\n  return btoa(\r\n    configArray\r\n      .map(envConfig => getId(envConfig.get<DynatraceEnvironmentConfig>().url))\r\n      .join(','),\r\n  );\r\n};\r\n\r\nexport const parseEnvironments = (\r\n  config: Config,\r\n  logger: LoggerService,\r\n): DynatraceApi[] => {\r\n  const configArray = config.getConfigArray('dynatrace.environments');\r\n\r\n  const identifier = getIdentifier(configArray);\r\n  return configArray.map(\r\n    envConfig =>\r\n      new DynatraceApi(\r\n        envConfig.get<DynatraceEnvironmentConfig>(),\r\n        identifier,\r\n        logger,\r\n      ),\r\n  );\r\n};\r\n\r\nexport type CustomQueryConfig = {\r\n  query: string;\r\n  environments?: string[];\r\n};\r\nexport const parseCustomQueries = (\r\n  config: Config,\r\n): Record<string, CustomQueryConfig | undefined> => {\r\n  const queryObjects = config.getOptionalConfigArray('dynatrace.queries') ?? [];\r\n  return queryObjects.reduce((acc, queryObject) => {\r\n    const queryId = queryObject.getOptionalString('id');\r\n    const query = queryObject.getOptionalString('query');\r\n    const environments = queryObject.getOptionalStringArray('environments');\r\n    if (queryId && query) {\r\n      acc[queryId] = { query: query, environments: environments };\r\n    }\r\n    return acc;\r\n  }, {} as Record<string, CustomQueryConfig | undefined>);\r\n};\r\n"],"names":["DynatraceApi"],"mappings":";;;;;;;;;;AAmBA,MAAM,SAAY,GAAA,SAAA,CAAA;AAElB,MAAM,KAAA,GAAQ,CAAC,GAAgB,KAAA;AAC7B,EAAI,IAAA;AACF,IAAA,MAAM,IAAO,GAAA,IAAI,GAAI,CAAA,GAAG,CAAE,CAAA,IAAA,CAAA;AAC1B,IAAA,OAAO,KAAK,SAAU,CAAA,CAAA,EAAG,KAAK,OAAQ,CAAA,GAAG,CAAC,CAAK,IAAA,SAAA,CAAA;AAAA,WACxC,CAAG,EAAA;AACV,IAAO,OAAA,SAAA,CAAA;AAAA,GACT;AACF,CAAA,CAAA;AAEA,MAAM,aAAA,GAAgB,CAAC,WAA0B,KAAA;AAC/C,EAAO,OAAA,IAAA;AAAA,IACL,WAAA,CACG,GAAI,CAAA,CAAA,SAAA,KAAa,KAAM,CAAA,SAAA,CAAU,GAAgC,EAAA,CAAE,GAAG,CAAC,CACvE,CAAA,IAAA,CAAK,GAAG,CAAA;AAAA,GACb,CAAA;AACF,CAAA,CAAA;AAEa,MAAA,iBAAA,GAAoB,CAC/B,MAAA,EACA,MACmB,KAAA;AACnB,EAAM,MAAA,WAAA,GAAc,MAAO,CAAA,cAAA,CAAe,wBAAwB,CAAA,CAAA;AAElE,EAAM,MAAA,UAAA,GAAa,cAAc,WAAW,CAAA,CAAA;AAC5C,EAAA,OAAO,WAAY,CAAA,GAAA;AAAA,IACjB,eACE,IAAIA,yBAAA;AAAA,MACF,UAAU,GAAgC,EAAA;AAAA,MAC1C,UAAA;AAAA,MACA,MAAA;AAAA,KACF;AAAA,GACJ,CAAA;AACF,EAAA;AAMa,MAAA,kBAAA,GAAqB,CAChC,MACkD,KAAA;AAClD,EAAA,MAAM,YAAe,GAAA,MAAA,CAAO,sBAAuB,CAAA,mBAAmB,KAAK,EAAC,CAAA;AAC5E,EAAA,OAAO,YAAa,CAAA,MAAA,CAAO,CAAC,GAAA,EAAK,WAAgB,KAAA;AAC/C,IAAM,MAAA,OAAA,GAAU,WAAY,CAAA,iBAAA,CAAkB,IAAI,CAAA,CAAA;AAClD,IAAM,MAAA,KAAA,GAAQ,WAAY,CAAA,iBAAA,CAAkB,OAAO,CAAA,CAAA;AACnD,IAAM,MAAA,YAAA,GAAe,WAAY,CAAA,sBAAA,CAAuB,cAAc,CAAA,CAAA;AACtE,IAAA,IAAI,WAAW,KAAO,EAAA;AACpB,MAAA,GAAA,CAAI,OAAO,CAAA,GAAI,EAAE,KAAA,EAAc,YAA2B,EAAA,CAAA;AAAA,KAC5D;AACA,IAAO,OAAA,GAAA,CAAA;AAAA,GACT,EAAG,EAAmD,CAAA,CAAA;AACxD;;;;;"}