{"version":3,"file":"dynatraceApi.cjs.js","sources":["../../src/service/dynatraceApi.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright 2024 Dynatrace LLC\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { dtFetch } from '../utils';\r\nimport { LoggerService } from '@backstage/backend-plugin-api';\r\nimport { TabularData } from '@dynatrace/backstage-plugin-dql-common';\r\n\r\nexport type DynatraceEnvironmentConfig = {\r\n  name: string;\r\n  url: string;\r\n  tokenUrl: string;\r\n  clientId: string;\r\n  clientSecret: string;\r\n  accountUrn: string;\r\n};\r\n\r\nexport type TokenResponse = {\r\n  scope: string;\r\n  token_type: string;\r\n  expires_in: number;\r\n  access_token: string;\r\n  resource: string;\r\n};\r\n\r\ntype DynatraceAccessInfo = {\r\n  url: string;\r\n  accessToken: string;\r\n  identifier: string;\r\n};\r\n\r\nexport type ExecuteQueryResponse = {\r\n  state: string;\r\n  requestToken: string;\r\n  ttlSeconds: number;\r\n};\r\n\r\nexport type PollQueryResponse<RecordType> = {\r\n  state: string;\r\n  progress: number;\r\n  result: {\r\n    records: RecordType[];\r\n    types: {\r\n      indexRange: number[];\r\n      mappings: Record<string, { type: string }>;\r\n    }[];\r\n    metadata: Record<string, object>;\r\n  };\r\n};\r\n\r\nconst DEFAULT_TOKEN_URL = 'https://sso.dynatrace.com/sso/oauth2/token';\r\n\r\nconst executeQuery = async (\r\n  { url, accessToken, identifier }: DynatraceAccessInfo,\r\n  dql: string,\r\n): Promise<ExecuteQueryResponse> => {\r\n  const fullUrl = new URL('platform/storage/query/v1/query:execute', url);\r\n  const queryExecRes = await dtFetch(fullUrl, identifier, {\r\n    method: 'POST',\r\n    headers: {\r\n      Authorization: `Bearer ${accessToken}`,\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(dql),\r\n  });\r\n  if (!queryExecRes.ok) {\r\n    throw new Error(await queryExecRes.text().catch(() => ''));\r\n  }\r\n  return queryExecRes.json();\r\n};\r\n\r\nconst pollQuery = async <T>(\r\n  { url, accessToken, identifier }: DynatraceAccessInfo,\r\n  requestToken: string,\r\n  logger: LoggerService,\r\n): Promise<PollQueryResponse<T>> => {\r\n  const fullUrl = new URL('platform/storage/query/v1/query:poll', url);\r\n  fullUrl.searchParams.set('request-token', requestToken);\r\n\r\n  const queryPollRes = await dtFetch(fullUrl, identifier, {\r\n    headers: {\r\n      Authorization: `Bearer ${accessToken}`,\r\n    },\r\n  });\r\n  if (queryPollRes.status !== 200) {\r\n    const queryPollResBody = await queryPollRes.text();\r\n    const message = `Error: Failed to poll query results for request token ${requestToken} Status: ${queryPollRes.status} ${queryPollRes.statusText} Body: ${queryPollResBody}`;\r\n    logger.error(message);\r\n    throw new Error(message);\r\n  }\r\n  return await queryPollRes.json();\r\n};\r\n\r\nconst waitForQueryResult = async <RecordType>(\r\n  accessInfo: DynatraceAccessInfo,\r\n  requestToken: string,\r\n  logger: LoggerService,\r\n): Promise<RecordType[]> => {\r\n  let pollQueryRes: PollQueryResponse<RecordType> = await pollQuery(\r\n    accessInfo,\r\n    requestToken,\r\n    logger,\r\n  );\r\n  while (pollQueryRes.state !== 'SUCCEEDED') {\r\n    pollQueryRes = await pollQuery(accessInfo, requestToken, logger);\r\n  }\r\n  return pollQueryRes.result.records;\r\n};\r\n\r\nconst getAccessToken = async (\r\n  config: DynatraceEnvironmentConfig,\r\n  identifier: string,\r\n  logger: LoggerService,\r\n): Promise<TokenResponse> => {\r\n  const body = new URLSearchParams({\r\n    grant_type: 'client_credentials',\r\n    client_id: config.clientId,\r\n    client_secret: config.clientSecret,\r\n    resource: config.accountUrn,\r\n  });\r\n  const tokenRes = await dtFetch(\r\n    config.tokenUrl ?? DEFAULT_TOKEN_URL,\r\n    identifier,\r\n    {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      body,\r\n    },\r\n  );\r\n  if (tokenRes.status !== 200) {\r\n    logger.error(\r\n      `Failed to get access token for environment ${config.name} (${config.url})`,\r\n    );\r\n    throw new Error(\r\n      `Failed to get access token for environment ${config.name} (${config.url})`,\r\n    );\r\n  }\r\n  return await tokenRes.json();\r\n};\r\n\r\nexport class DynatraceApi {\r\n  private readonly config: DynatraceEnvironmentConfig;\r\n  constructor(\r\n    config: DynatraceEnvironmentConfig,\r\n    private identifier: string,\r\n    private logger: LoggerService,\r\n  ) {\r\n    this.config = {\r\n      ...config,\r\n      url: config.url.endsWith('/')\r\n        ? config.url.substring(0, config.url.length - 1)\r\n        : config.url,\r\n    };\r\n  }\r\n\r\n  get environmentName() {\r\n    return this.config.name;\r\n  }\r\n\r\n  get environmentUrl() {\r\n    return this.config.url;\r\n  }\r\n\r\n  async executeDqlQuery(query: string): Promise<TabularData> {\r\n    const tokenResponse = await getAccessToken(\r\n      this.config,\r\n      this.identifier,\r\n      this.logger,\r\n    );\r\n    const environment: DynatraceAccessInfo = {\r\n      url: this.config.url,\r\n      accessToken: tokenResponse.access_token,\r\n      identifier: this.identifier,\r\n    };\r\n\r\n    const execQueryRes = await executeQuery(environment, query);\r\n    return await waitForQueryResult(\r\n      environment,\r\n      execQueryRes.requestToken,\r\n      this.logger,\r\n    );\r\n  }\r\n}\r\n"],"names":["dtFetch"],"mappings":"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"}