{"version":3,"file":"labelSelectorParser.cjs.js","sources":["../../src/utils/labelSelectorParser.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright 2024 Dynatrace LLC\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\ninterface LabelKeyValue {\r\n  key: string;\r\n  value: string;\r\n}\r\n\r\nfunction parseKubernetesSelector(labelSelector: string): LabelKeyValue[] {\r\n  const statements = labelSelector.split(',');\r\n  return statements\r\n    .map<LabelKeyValue | undefined>(statement => {\r\n      const keyValue = statement.split('=');\r\n\r\n      if (keyValue.length < 2) {\r\n        return undefined;\r\n      }\r\n\r\n      const key = keyValue[0].trim();\r\n      const value = keyValue[1].trim();\r\n\r\n      if (!key || !value) {\r\n        return undefined;\r\n      }\r\n\r\n      return {\r\n        key,\r\n        value,\r\n      };\r\n    })\r\n    .filter((label): label is LabelKeyValue => !!label);\r\n}\r\n\r\n/**\r\n * Parses a kubernetes label selector to a DQL filter\r\n * @example\r\n * 'backstage.io/kubernetes-label-selector': 'label1=value1,label2=value2' to \"| filter workload.labels[`label1`] == \"value1\" AND workload.labels[`label2`] == \"value2\"\"\r\n * @param labelSelector\r\n */\r\nexport function generateKubernetesSelectorFilter(\r\n  labelSelector: string,\r\n): string {\r\n  const labels = parseKubernetesSelector(labelSelector);\r\n  if (labels.length === 0) {\r\n    return '';\r\n  }\r\n  const labelMap = labels\r\n    .map(label => `workload.labels[\\`${label.key}\\`] == \"${label.value}\"`)\r\n    .join(' AND ');\r\n\r\n  return labelMap ? `| filter ${labelMap}` : '';\r\n}\r\n"],"names":[],"mappings":";;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBA,SAAS,wBAAwB,aAAwC,EAAA;AACvE,EAAM,MAAA,UAAA,GAAa,aAAc,CAAA,KAAA,CAAM,GAAG,CAAA,CAAA;AAC1C,EAAO,OAAA,UAAA,CACJ,IAA+B,CAAa,SAAA,KAAA;AAC3C,IAAM,MAAA,QAAA,GAAW,SAAU,CAAA,KAAA,CAAM,GAAG,CAAA,CAAA;AAEpC,IAAI,IAAA,QAAA,CAAS,SAAS,CAAG,EAAA;AACvB,MAAO,OAAA,KAAA,CAAA,CAAA;AAAA,KACT;AAEA,IAAA,MAAM,GAAM,GAAA,QAAA,CAAS,CAAC,CAAA,CAAE,IAAK,EAAA,CAAA;AAC7B,IAAA,MAAM,KAAQ,GAAA,QAAA,CAAS,CAAC,CAAA,CAAE,IAAK,EAAA,CAAA;AAE/B,IAAI,IAAA,CAAC,GAAO,IAAA,CAAC,KAAO,EAAA;AAClB,MAAO,OAAA,KAAA,CAAA,CAAA;AAAA,KACT;AAEA,IAAO,OAAA;AAAA,MACL,GAAA;AAAA,MACA,KAAA;AAAA,KACF,CAAA;AAAA,GACD,CACA,CAAA,MAAA,CAAO,CAAC,KAAkC,KAAA,CAAC,CAAC,KAAK,CAAA,CAAA;AACtD,CAAA;AAQO,SAAS,iCACd,aACQ,EAAA;AACR,EAAM,MAAA,MAAA,GAAS,wBAAwB,aAAa,CAAA,CAAA;AACpD,EAAI,IAAA,MAAA,CAAO,WAAW,CAAG,EAAA;AACvB,IAAO,OAAA,EAAA,CAAA;AAAA,GACT;AACA,EAAA,MAAM,QAAW,GAAA,MAAA,CACd,GAAI,CAAA,CAAA,KAAA,KAAS,CAAqB,kBAAA,EAAA,KAAA,CAAM,GAAG,CAAA,QAAA,EAAW,KAAM,CAAA,KAAK,CAAG,CAAA,CAAA,CAAA,CACpE,KAAK,OAAO,CAAA,CAAA;AAEf,EAAO,OAAA,QAAA,GAAW,CAAY,SAAA,EAAA,QAAQ,CAAK,CAAA,GAAA,EAAA,CAAA;AAC7C;;;;"}